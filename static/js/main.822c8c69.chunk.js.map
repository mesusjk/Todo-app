{"version":3,"sources":["Components/Header.js","Components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","useState","text","setText","className","type","placeholder","onKeyDown","e","keyCode","submit","onChange","target","value","TodoItem","btnHover","btnRemoveStyle","position","top","right","color","fontSize","cursor","App","state","statusDone","showTodos","todos","this","setState","prevState","key","Date","now","done","show","item","find","newTodos","filter","i","length","filterTodos","id","addTodo","bind","map","toggleTodo","delete","deleteTodo","onClick","filterNothing","filterActive","filterCompleted","deleteInactiveTodo","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.822c8c69.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nfunction Header(props) {\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    let formHandler = (e) => {\r\n        //e.preventDefault();\r\n        if (e.keyCode == 13) { \r\n            props.submit(text);\r\n            setText(\"\");\r\n         }\r\n    }\r\n\r\n    let inputHandler = e => {\r\n        //e.preventDefault();\r\n        setText(e.target.value)\r\n    }\r\n\r\n  return (\r\n    <header className=\"header\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n          onKeyDown={formHandler}\r\n          onChange={inputHandler}\r\n          value={text}\r\n        />\r\n      <h1>Todo</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, {useState} from \"react\";\r\n\r\nfunction TodoItem(props) {\r\n\r\n  const [btnHover, setBtnHover] = useState(false);\r\n\r\n  let btnRemoveStyle = {\r\n    position: \"absolute\",\r\n    top: \"17px\",\r\n    right: \"20px\",\r\n    color: \"black\",\r\n    fontSize: \"27px\",\r\n    cursor: \"pointer\"\r\n  };\r\n\r\n  if (btnHover) { btnRemoveStyle.color = \"red\" }\r\n  else { btnRemoveStyle.color = \"black\" }\r\n\r\n  return (\r\n    // <li className={`${props.item.done === true ? \"completed\" : \"\"}`}>\r\n    //     <div className=\"view\">\r\n    //     <input onClick={() => props.done(props.item.key)} type=\"checkbox\" className=\"toggle\" value=\"on\" checked={props.item.done === true ? true : false} />\r\n    //       <label> { props.item.text } </label>\r\n    //       <button onClick={() => props.delete(props.item.key)}>&times;</button>\r\n    //     </div>\r\n    // </li>\r\n\r\n    <li className={`${props.item.done === true ? \"completed\" : \"\"}`}>\r\n      <div className=\"view\">\r\n        <input onClick={() => props.done(props.item.key)} type=\"checkbox\" className=\"toggle\" value=\"on\" checked={props.item.done === true ? true : false} />\r\n        <label> { props.item.text } </label>\r\n        <button\r\n        onClick={() => props.delete(props.item.key)}\r\n        style={btnRemoveStyle}\r\n        onMouseOver={() => setBtnHover(true)}\r\n        onMouseLeave={() => setBtnHover(false)}\r\n        >\r\n          &times;\r\n          </button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\nimport './App.css';\n\n// Components\nimport Header from \"./Components/Header\";\nimport TodoItem from \"./Components/TodoItem\";\n\nclass App extends Component {\n\n  state = {\n    statusDone: false,\n    showTodos: \"All\",\n    todos: []\n  }\n\n  addTodo(text) {\n    this.setState(prevState => {\n      return {\n        todos: [\n          ...prevState.todos,\n          { key: Date.now(), done: false, text: text, show: \"All\" }\n        ]\n      }\n    })\n  }\n\n  toggleTodo(key) {\n    const {todos} = this.state;\n\n    let item = todos.find(item => item.key === key);\n    item.done = !item.done\n\n    let newTodos = todos.filter(item => item.key !== key);\n\n    this.setState({\n      todos: [\n        ...newTodos,\n        item,\n      ]\n    })\n  }\n\n  filterActive() {\n    let {todos} = this.state;\n    this.setState({showTodos: \"Active\"})\n    for (let i = 0; i < todos.length; i++) {\n      if (todos[i].done === false) {\n        todos[i].show = \"Active\";\n      }\n    }\n  }\n\n  filterCompleted() {\n    let {todos} = this.state;\n    this.setState({showTodos: \"Completed\"})\n    for (let i = 0; i < todos.length; i++) {\n      if (todos[i].done === true) {\n        todos[i].show = \"Completed\";\n      }\n    }\n  }\n\n  filterNothing() {\n    let {todos} = this.state;\n    this.setState({showTodos: \"All\"});\n    for (let i = 0; i < todos.length; i++) {\n      todos[i].show = \"All\";\n    }\n  }\n\n  deleteTodo(key) {\n    this.setState(prevState => {\n      return {\n        todos: prevState.todos.filter(item => item.key !== key)\n      }\n    })\n  }\n\n  deleteInactiveTodo() {\n    this.setState(prevState => {\n      return {\n        todos: [\n          ...prevState.todos.filter(item => item.done !== true)\n        ]\n      }\n    })\n  }\n\n  render() {\n\n    let { todos, showTodos } = this.state;\n\n    let filterTodos = todos.filter(item => item.show === showTodos);\n\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <Header submit={this.addTodo.bind(this)} />\n\n        <section className=\"main\">\n        <ul className=\"todo-list\">\n          {\n            filterTodos.length == 0 ?\n            <p className=\"empty-alert\">There isn't any todo</p> :\n            filterTodos.map(item => <TodoItem \n              key={item.key}\n              text={item.text}\n              item={item}\n              done={this.toggleTodo.bind(this)}\n              delete={this.deleteTodo.bind(this)}\n              />)\n          }\n        </ul>\n\n        <div className=\"buttons\">\n          <button onClick={this.filterNothing.bind(this)} className=\"filter-btn\" type=\"button\">All</button>\n          <button onClick={this.filterActive.bind(this)} className=\"filter-btn\" type=\"button\">Active</button>\n          <button onClick={this.filterCompleted.bind(this)} className=\"filter-btn\" type=\"button\">Completed</button>\n          <button onClick={this.deleteInactiveTodo.bind(this)} className=\"filter-btn\" type=\"button\">delete All Completed</button>\n        </div>\n\n        <div className=\"todo-length\"><p>{`${filterTodos.length} todo`}</p></div>\n      </section>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}